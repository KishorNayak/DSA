   vector<int> shortestPath(vector<vector<int>>& edges, int n,int m, int src){
        vector<int>result(n,-1);
        queue<int>q;
        q.push(src);
        result[src]=0;
        // vector<bool>visited(n,false);
        vector<int>list[n];
        for(int i=0;i<m;i++){
            int v=edges[i][0];
            int u =edges[i][1];
            list[u].push_back(v);
            list[v].push_back(u);
        }
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            
            for(auto i : list[node]){
                if(result[i]==-1){
                    q.push(i);
                    result[i] = 1+result[node];
                }
            }
        }
        
        return result;
    }
    
