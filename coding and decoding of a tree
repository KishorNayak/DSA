/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if (!root) return "#,";
        
        queue<TreeNode*> q;
        q.push(root);
        string code = "";
        
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            
            if (node == nullptr) {
                code += "#,";
            } else {
                code += to_string(node->val) + ',';
                q.push(node->left);
                q.push(node->right);
            }
        }
        
        return code;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if (data.empty() || data == "#,") return nullptr;
        
        stringstream ss(data);
        string word;
        getline(ss, word, ',');
        
        TreeNode* root = new TreeNode(stoi(word));
        queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            
            if (!getline(ss, word, ',')) break;
            if (word != "#") {
                TreeNode* left = new TreeNode(stoi(word));
                node->left = left;
                q.push(left);
            }
            
            if (!getline(ss, word, ',')) break;
            if (word != "#") {
                TreeNode* right = new TreeNode(stoi(word));
                node->right = right;
                q.push(right);
            }
        }
        
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
